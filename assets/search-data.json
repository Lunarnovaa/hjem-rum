[{"id":"0","title":"Hjem Rum","content":"Hjem Rum Welcome to Hjem Rum's Official Documentation. In the top right, you can see the option search menu. In the top left, you can  click  Hjem Rum  for this page,  Options  for the options page, and  Search  for the full option search page. If you are looking to install Hjem Rum, please see  Installing  and  Quirks, Tips, and Tricks  in the left pane. If you are looking to contribute to Hjem Rum, please see  Contributing ,  Setting Up Module Tests , and  Review Tips . ","path":"index.html"},{"id":"1","title":"Review Tips {#review-tips}","content":"Review Tips {#review-tips} An often overlooked part of contributing to an open source project is proper  review practices. It's very easy to alienate contributors with bad code review.  Of course, nobody will get this right  all  of the time. Rather, this guide aims  to encourage some good practices to make Hjem Rum a better environment for  contributors. If you notice another contributor not following these, don't call them out  publicly―choose instead to respectfully message them via private channels. These  tips serve as a reference, not a rule of law. Much of this guide is inspired by  Code Review Antipatterns  by Simon  Tatham. If you're interested, give it a look!  1. Be nice {#ch-1-be-nice} Starting off with an easy one! However, there's actually something meaningful to  be said here. As a reviewer, it's easy to get frustrated with constantly giving  the same feedback. If you find yourself giving feedback like: Use  _ _ _ _ . Instead, maybe phrase it as: Could you change this to  _ _ _ _ ? This might sound silly at first. But when it feels like a reviewer is  on your  side , it makes a huge difference. If this tone feels a little foreign, pretend  you're writing an email, and that should give you a good barometer. 2. Single-trip reviews {#ch-2-single-trip-reviews} As a contributor, it can be frustrating to finish accommodating all the review  comments, only to immediately be given a bunch of other suggestions, which  could've easily been included in the first review session. As a reviewer, take a  moment and think―if these review comments were accommodated, would you be happy  to merge this? If not, you might want to add something else to the review―or you  might leave the contributor with unnecessarily high hopes. Part of this is also communicating big problems early on. Imagine if, as a  contributor, you have been responding to review comments for ages and are hoping  things are actually getting close to being merged. Only suddenly, the reviewer  tells you: I actually don't like any of this, and want it completely redone. Or: I don't think this is a good idea for the project. How would that feel? As a reviewer, it's best to temper expectations. If  something will require a lot of changes to be mergeable, be up-front about  it―even if you feel a little guilty. Better to rip the bandaid off now, than to  leave it on for a few review sessions. 3. United front {#ch-3-united-front} Anyone who's contributed to  nixpkgs  knows the cycle―you've accommodated one  reviewer's comments, only for a different reviewer to come in with MORE things  to change. Or, even worse―maybe reviewer 2 disagrees with reviewer 1―and now  they're fighting on your PR. When possible, try to coordinate review feedback. The  SNUG Discord server  is a  great place for working together to ensure feedback is clear and consistent  between reviewers. 4. Bikeshedding {#ch-4-bikeshedding} Have you ever made a PR, only for every single line to be criticized for not  being done exactly how the reviewer wants? It feels like your code is being held  to an impossibly high standard. Reviewers often view code more harshly―after  all, they're the arbiter of whether some piece of code makes it into the  project. But this alienates contributors―especially when this is combined with  multi-trip reviews . It ends up feeling like your code is being held hostage,  until the maintainer declares it  perfect . To prevent this as a reviewer, there are a few ways to determine whether you, or  someone else, might be bikeshedding. Are the standards you're requesting to be followed actually written down in  the documentation? If not, is the unwritten standard consistently followed in  the existing codebase? If neither of these are true, maybe you shouldn't put  this on a random contributor. Is it  blocking ? A stylistic change might be nice to have, but could be  merged without it. Maybe you as the reviewer could make the patch yourself  after the PR is merged, to take the work off the contributor. Is your requested change part of code actually introduced by this  contributor? Maybe you never noticed that this part of the code is a little  ugly, or uses a paradigm you don't love. But this code wasn't changed by the  contributor―you only noticed it because their changes touched the same file.  Rather than putting this work on the contributor, who just wants  their  change in, maybe just make this patch separately. Sometimes, a  little  bikeshedding isn't that big of a deal―if you've worked  with this contributor before and think they'll be fine with a few stylistic  nitpicks, then mentioning a stylistic change is probably fine. But when  bikeshedding does happen, try to treat it as  optional . Rather than saying: Please do  _ _ _ . Maybe, if it's a stylistic change, say: Stylistic nitpick, but could you maybe change this to  _ _ _ _ ? Not blocking. Extending this document {#ch-extending-this-document} If you find yourself experiencing something as a contributor that makes you less  motivated to contribute―whether it's for Hjem Rum or some other project―feel  free to make a PR extending this document. Proper code review practices keep  contributors around, which is how an open source project thrives. Code review  will never be perfect, but it can be better. ","path":"contributing/REVIEWING.html"},{"id":"2","title":"Setting Up Module Tests {#setting-up-module-tests}","content":"Setting Up Module Tests {#setting-up-module-tests} Hjem Rum's testing system is designed with simplicity in mind, so we shy away  from other testing frameworks and stick with  , from the  internal NixOS lib  located in the Nixpkgs monorepo. There are no non-standard  abstractions in regards to writing the tests, so they should be written just  like any other test that uses the NixOS Test Driver. Creating Tests {#ch-creating-tests} Every file is automatically imported with  {file} , given that there is a check output  that imports the directory (more on that later), so your only worry should be  creating the tests in their relevant directories. If you're writing a test for  btop, for instance, you should create a module as  . If you're certain your test category doesn't get covered by any of the existing  directories, you can create a new one together with a check that imports files  in this directory. This is really easy to do: Naming {#sec-naming} To reduce CI run time, we only run checks for which the module or test file has  changed. For this association to work, the following naming scheme has to be  respected:  . Below is a list of files, and their corresponding name.  ->   ->   ->  You may declare multiple test files for a module by having all of those names  start with the aformentioned pattern, such as  . [ !IMPORTANT ]  If you do not follow this rule, your tests will not be run during CI. Writing Tests {#ch-writing-tests} Tests for Hjem Rum are written just like any other test, so it might be worth to  take a read at how NixOS tests work.  nix.dev provides a useful guide , as does  the  NixOS Manual ,  both detailing how to use the framework. Our test system has some pre-defined things aiming at avoid boilerplate code: A user named \"bob\" is already created, with no groups,   set to  true and no password. Both Hjem and Hjem Rum are already imported by default. ,   and   are also passed to every test module, so you're free to  use them as you will. The  nushell test module  can serve as a strong example of a test module, and  provides comments for each step of the  . Care should be taken to  wait for the proper systemd targets to be reached, change users to run commands,  and avoid other possible footguns. The approach this module uses to test its  configuration is to have a file for each configuration alongside it, which then  gets passed to the test VM and gets evaluated with diff. You can use other  approaches if it's more convenient, that's just a suggestion. You can also debug your tests through a Python REPL by running: Although both guides refer to {file}  instead of  , the former is just a wrapper around the latter, abstracting  certain concepts, so the code ran by them should be interchangeable between  one another. ","path":"contributing/TESTING.html"},{"id":"3","title":"Contributing {#contributing}","content":"Contributing {#contributing} Hjem Rum (or HJR) is always in need of contributions as a module collection. As  programs are developed, modules will need to be added, changed, removed, etc.,  meaning that the development of HJR is, in essence, unending. Contributing is also a great way to learn the Nix module system and even  function writing. Don't be afraid to experiment and try learning something new. If you are familiar with contributing to open source software, you can safely  skip ahead to  Core Principles . Otherwise, read the following section to learn  how to fork a repo and open a PR. Getting Started {#ch-getting-started} To begin contributing to HJR, you will first need to create a fork off of the  main branch in order to make changes. For info on how to do this, we recommend  GitHub's own  documentation on forking repositories . Once you have your own fork, it is recommend that you create a branch for the  changes or additions you seek to make, to make it easier to set up multiple PRs  from your fork. To do so, you can read this  article from GeeksforGeeks  that  will also explain branches for you. Don't worry too much about the technical  details, the most important thing is to make and switch to a branch from HEAD. Commit Format {#sec-commit-format} [ !TIP ]  Our dev shell allows for interactive commits, through the means of  commitizen . If this is preferred, you can run   to be prompted to  build your commit. For consistency, we do enforce a strict (but simple) commit style, that will be  linted against. The format is as follows (sections between   are optional): <top_level_scope>: the main scope of your commit. If making a change to a  program, this would be  ). For changes unrelated to the modules API,  we tend to use semantic scopes such as   for CI/repo related changes. [ <specific_scope> ] : An optional, more specific scope for your module. If  making changes to a specific program, this would be  . <message>: A free form commit message. Needs to be imperative and without  punctuation (e.g.   instead of  ). [ <body> ] : A free form commit body. Having one is encouraged when your  changes are difficult to explain, unless you're writing in-depth code comments  (it is still preferred however). You can now make your changes in your editor of choice. After committing your  changes, you can run: and then open up a PR, or \"Pull Request,\" in the upstream HJR repository. Again,  GitHub has good documentation for  creating a PR . After you have setup a PR, it will be  reviewed  by maintainers and changes may  be requested. Make the changes requested and eventually it will likely be  accepted and merged into main. Core Principles {#ch-core-principles} In creating HJR, we had a few principles in mind for development: Minimize the number of options written. Include only the module collection - leave functionality to Hjem. Maintain readability of code, even for new users. Please keep these in mind as you read through our general guidelines for  contributing. Guidelines {#ch-guidelines} These guidelines, are, of course, merely guidelines. There are and will continue  to be exceptions. However, do your best to stick to them, and keep in mind that  reviewers will hold you to them as much as possible. Aliases {#sec-aliases} At the top of any module, there should always be a   set. Within  this, functions should have their location aliased, cfg should be aliased, and  any generators should have an alias as well. Here's an example for a module that  makes use of the TOML generator used in Nixpkgs: Notice that each function has its location aliased with an inherit to its target  location. Ideally, this location should be where one could find it in the source  code. For example, rather than using {file} , we use  {file} , because mkIf is declared at   within  the Nixpkgs repo. Also notice that in this case,   includes both   and  , so the alias name is just  . Always be sure to include   that links to the point where options are  configured by the user. Writing Options {#sec-writing-options} Writing new options is the core of any new module. It is also the easiest place  to blunder. As stated above, a core principle of HJR is to minimize the number  of options as much as possible. As such, we have created a general template that  should help inform you of what options are needed and what are not: : Used to toggle install and configuration of package(s). : Used to customize and override the package installed. As needed,  : List of packages used in a module. : Primary configuration option, takes Nix code and converts to  target lang. As needed, one extra option for each extra file, such as   for  theme.toml. As needed,  : Extra lines of strings passed directly to config  file for certain programs. For the most part, this should be sufficient. Overrides of packages should be  simply offered through a direct override in  . For example, ncmpcpp's  package has a   argument. Rather than creating an extra  option for this, the contributor should note this with  , and  give an example of it like so: and the user could simply pass: The   of   and other conversion options should preferably be a   option exposed by the generator (for example, TOML has   and  ), or, if using a  custom generator, a   should be created in   (for example,  ). Otherwise, a simple   would suffice. As a rule of thumb, submodules should not be employed. Instead, there should  only be one option per file. For some files, such as spotify-player's  {file} , you may be tempted to create multiple options for   and  , as Home Manager does. Please avoid this. In this case, we can  have a simple   option that the user can then include a list of keymaps  and/or a list of actions that get propagated accordingly: Also note that the option description includes a link to upstream info on  settings options. If an option is dependent on  , (e.g.  ) you must  also  set   alongside  . Example: It is essentially just a string that shows the user what the option is set to by  default. This can also be used in  , but it is more common to use it in  . If you do not set this, the docs builder will break due to not knowing how to  resolve the reference to  . Conditionals in Modules {#sec-conditionals-in-modules} Always use a   before the   section. Example: As a general guideline,  do not write empty strings to files . Not only is  this poorly optimized, but it will cause issues if a user happens to be manually  using the Hjem tooling alongside HJR. Here are some examples of how you might  avoid this: Here all that is needed is a simple   with a condition of the   option not being left empty. In a case where you write to multiple files, you  can use  , like so: This essentially takes the attribute set of   and  conditionally  adds  attributes defining more files to be written to depending on  if  the  corresponding option has been set. This is optimal because the first three files  written to share an option due to how GTK configuration works. One last case is in the Hyprland module, where several checks and several  options are needed to compile into one file. Here is how it is done: An additional attribute set of boolean aliases is set within a   set  to highlight the different checks done and to add quick ways to reference each  check without excess and redundant code. First, the file is only written if any of the options to write to the file are  set.   is then used to compile each option's results in an  optimized and clean way. Extending RumLib {#sec-extending-rumlib} Rather than having functions scattered throughout the module collection, we  would rather keep our directories organized and purposeful. Therefore, all  custom functions should go into our extended lib, found at  . The most common functions that might be created are a   and   pair. The former should be prefixed with \"to\" to maintain style and describe  their function: conversion  to  other formats. For example,   is the function that converts to the format required for ncmpcpp settings. Likewise, types should be suffixed with \"Type\" to maintain style and describe  their function. For example,   describes the type used in   converted to Hyprlang. When it comes to directory structure, you should be able to infer how we  organize our lib by both our folder structure itself as well as the names of  functions. For example, {option}  is found in  . In cases where a file is a single function, always be  sure to make sure the name matches the file. If a program uses multiple functions of the same kind (e.g. two generators), you  can put them in one file, like is done in  . Additionally, please follow how lib is structured in Nixpkgs. For example, the  custom function   is under   to signify that it  operates on an attribute set, just like in Nixpkgs. Docs {#sec-docs} If you would like to contribute to our documentation, we ask a few things of  you: Please aim to write in a formal tone. Use proper grammar and check for misspellings or typos. Try to be concise, but also explain things in full. In general, the requirements are very loose, but maintainers may have more  specific asks of you depending on the case. Writing can be very personal and  very fluid, so there are less rigid expectations here, but that does not mean  standards are lower. If you are including an option or function labeled like: Then you will have to include {file} before it, or {option} if it is an option: It is admittedly a bit confusing why we could use {file} for  , but  the best way to think of it is that {file}  literally  corresponds to file {file}  in Nixpkgs, which contains the   function. If you do not do it like this, the link check on the docs will fail, since our  docs generator will attempt to make hyperlinks out of those function names. Headers should always have an anchor with them to ensure the link checker can  follow header links at time of build. Follow these examples, and you should find  it simple: Words should be separated by  , special characters should be removed, numbers  are fine to keep, extra spaces should be removed, everything should be lower  caps, first headings have no prefix, second headings have   prefix, third  headings have   prefix, etc. If you're unsure, just give it your best shot  and a reviewer will make sure it's as it should be. Tests {#sec-tests} Please refer to the  testing documentation  for more information on how tests  work. Reviewing a PR {#ch-reviewing-a-pr} Even if you do not have write-access, you can always leave a review on someone  else's PR. Again, GitHub has great  documentation on reviewing PRs . This is  great practice for learning the guidelines as well as learning exceptions to the  rules. For some guidelines on review practices, see  REVIEWING.md . ","path":"contributing/CONTRIBUTING.html"},{"id":"4","title":"Quirks, Tips, & Tricks {#quirks-tips-tricks}","content":"Quirks, Tips, & Tricks {#quirks-tips-tricks} As you are getting familiar with Hjem Rum, you may find some strange quirks that  you are unfamiliar with. This is especially so as unlike Home Manager, the  underlying toolset implementation is a wholly separate project, with Hjem Rum  serving only as a module collection on top of Hjem. To help alleviate this, here are some of those quirks that you may find, as well  as some tips to help you on your journey with Hjem Rum. Environmental Variables {#ch-environmental-variables} Hjem provides the option {option}  allowing the  user to set environmental variables to be sourced. However, Hjem does not have  the capability to actually source them. This can be done manually by the user,  but Hjem Rum integrates it directly into our modules. For example, if you use  Hjem Rum to install and configure zsh, your sessionVariables set in Hjem will be  made available. Currently, some of our modules may add environmental variables (such as our GTK  module), but cannot load them without the use of another module. Currently,  modules that load environmental variables include: If you are either using something like our GTK module, or are manually adding  variables to {option} , but are neither loading  those variables manually, or using one of the above modules, those variables  will not be loaded. This will likely cause you problems. For example, GTK  applications may not respect your theme, as many rely on the environmental  variable to actually use the theme you declare. Please see  #17  for status on providing support for shells and compositors. If  your shell or compositor is on listed there, please leave a comment and it will  be added. You are encouraged to open a PR to help support your shell or  compositor if possible. ","path":"usage/QUIRKS.html"},{"id":"5","title":"Installing Hjem Rum {#installing-hjem-rum}","content":"Installing Hjem Rum {#installing-hjem-rum} Welcome to Hjem Rum. Installing and configuring Hjem Rum is as easy as any other  module. Importing the Hjem Rum Flake {#ch-importing-the-hjem-rum-flake} To begin using Hjem Rum, simply add and import Hjem and Hjem Rum into your  flake: Important Hjem Settings {#ch-important-hjem-settings} Be sure to first set the necessary settings for Hjem and import Hjem Rum's Hjem  module from the input: Configuring Hjem Rum Modules {#ch-configuring-the-hjem-rum-modules} You can then configure any of the options defined in this flake in any nix  module: Please see the options page for a thorough list of options you can set. ","path":"usage/INSTALLATION.html"},{"id":"6","title":"Option: rum.desktops.hyprland.enable","content":"Whether to enable Hyprland.","path":"options.html#option-rum-desktops-hyprland-enable"},{"id":"7","title":"Option: rum.desktops.hyprland.extraConfig","content":"Extra configuration that will be appended verbatim at the end of {file}`~/.config/hypr/hyprland.conf`.\n","path":"options.html#option-rum-desktops-hyprland-extraConfig"},{"id":"8","title":"Option: rum.desktops.hyprland.importantPrefixes","content":"List of prefix of attributes to source at the top of the config.\n","path":"options.html#option-rum-desktops-hyprland-importantPrefixes"},{"id":"9","title":"Option: rum.desktops.hyprland.plugins","content":"List of Hyprland plugins to use. Can either be packages or\nabsolute plugin paths.\n","path":"options.html#option-rum-desktops-hyprland-plugins"},{"id":"10","title":"Option: rum.desktops.hyprland.settings","content":"Hyprland configuration written in Nix. Entries with the same key\nshould be written as lists. Variables' and colors' names should be\nquoted. See [Hyprland's documentation] for more examples.\n\n[Hyprland's documentation]: https://wiki.hyprland.org\n","path":"options.html#option-rum-desktops-hyprland-settings"},{"id":"11","title":"Option: rum.environment.hideWarning","content":"Whether to enable a warning for env vars not being implemented.","path":"options.html#option-rum-environment-hideWarning"},{"id":"12","title":"Option: rum.misc.gtk.bookmarks","content":"Bookmarks used by GTK file managers (ex. Nautilus).\nEach entry should have one of the following formats:\n- `[uri]`\n- `[uri] <display name>`\n","path":"options.html#option-rum-misc-gtk-bookmarks"},{"id":"13","title":"Option: rum.misc.gtk.css.gtk3","content":"CSS to be written to {file}`$HOME/.config/gtk-3.0/gtk.css`.\nYou can either use this as lines or you can reference\na CSS file from your theme's package (or both).\n","path":"options.html#option-rum-misc-gtk-css-gtk3"},{"id":"14","title":"Option: rum.misc.gtk.css.gtk4","content":"CSS to be written to {file}`$HOME/.config/gtk-4.0/gtk.css`.\nYou can either use this as lines or you can reference\na CSS file from your theme's package (or both).\n","path":"options.html#option-rum-misc-gtk-css-gtk4"},{"id":"15","title":"Option: rum.misc.gtk.enable","content":"Whether to enable GTK configuration.","path":"options.html#option-rum-misc-gtk-enable"},{"id":"16","title":"Option: rum.misc.gtk.packages","content":"The list of packages to be installed for gtk themes.\nThis list should consist of any packages that will be used\nby your GTK theme(s).\n","path":"options.html#option-rum-misc-gtk-packages"},{"id":"17","title":"Option: rum.misc.gtk.settings","content":"The settings that will be written to the various gtk files\nto configure the GTK theme. GTK documentation is perhaps\nnebulous, but the [Arch Wiki entry] and the [official GTK\ndocumentation] are decent places to start.\n\nPlease note that each option name will have \"gtk-\" prepended\nto it, so there is no need to include that on every single option.\n\n[Arch Wiki entry]: https://wiki.archlinux.org/title/GTK\n[official GTK documentation]: https://docs.gtk.org/gtk3/class.Settings.html\n","path":"options.html#option-rum-misc-gtk-settings"},{"id":"18","title":"Option: rum.programs.alacritty.enable","content":"Whether to enable Alacritty.","path":"options.html#option-rum-programs-alacritty-enable"},{"id":"19","title":"Option: rum.programs.alacritty.package","content":"The alacritty package to use.","path":"options.html#option-rum-programs-alacritty-package"},{"id":"20","title":"Option: rum.programs.alacritty.settings","content":"The configuration converted into TOML and written to\n{file}`$HOME/.config/alacritty/alacritty.toml`.\nPlease reference [Alacritty's documentation]\nfor config options.\n\n[Alacritty's documentation]: https://alacritty.org/config-alacritty.html\n","path":"options.html#option-rum-programs-alacritty-settings"},{"id":"21","title":"Option: rum.programs.beets.enable","content":"Whether to enable beets.","path":"options.html#option-rum-programs-beets-enable"},{"id":"22","title":"Option: rum.programs.beets.package","content":"The beets package to use. To get plugins to work, you will need to override the beets derivation\nwith the plugins you want. Consult the [beets derivation] for a list of\navailable plugins.\n\n[beets derivation]: https://github.com/NixOS/nixpkgs/blob/master/pkgs/tools/audio/beets/builtin-plugins.nix\n","path":"options.html#option-rum-programs-beets-package"},{"id":"23","title":"Option: rum.programs.beets.settings","content":"Beets configuration that is written to {file}`$HOME/.config/beets/config.yaml`.\nRefer to the beets [documentation] for available options.\n\nIf you would like to use plugins, please consult the description of\n[rum.programs.beets.package](#option-rum-programs-beets-package) and the\n[official plugin documentation] on the plugins configuration.\n\n[documentation]: https://beets.readthedocs.io/en/stable/reference/config.html\n[official plugin documentation]: https://beets.readthedocs.io/en/stable/reference/config.html#plugins\n","path":"options.html#option-rum-programs-beets-settings"},{"id":"24","title":"Option: rum.programs.bottom.enable","content":"Whether to enable bottom.","path":"options.html#option-rum-programs-bottom-enable"},{"id":"25","title":"Option: rum.programs.bottom.package","content":"The bottom package to use.","path":"options.html#option-rum-programs-bottom-package"},{"id":"26","title":"Option: rum.programs.bottom.settings","content":"The configuration converted into TOML and written to\n{file}`$HOME/.config/bottom/bottom.toml`.\n\nPlease reference [bottom's config file documentation]\nfor config options.\n\n[bottom's config file documentation]: https://bottom.pages.dev/stable/configuration/config-file\n","path":"options.html#option-rum-programs-bottom-settings"},{"id":"27","title":"Option: rum.programs.direnv.direnvrc","content":"Bash code loaded before every `.envrc`. Good for personal extensions.\nFind community-maintained examples in [direnv's wiki]\n\n[direnv's wiki]: https://github.com/direnv/direnv/wiki\n","path":"options.html#option-rum-programs-direnv-direnvrc"},{"id":"28","title":"Option: rum.programs.direnv.enable","content":"Whether to enable direnv.","path":"options.html#option-rum-programs-direnv-enable"},{"id":"29","title":"Option: rum.programs.direnv.integrations.fish.enable","content":"Whether to enable direnv integration with fish.","path":"options.html#option-rum-programs-direnv-integrations-fish-enable"},{"id":"30","title":"Option: rum.programs.direnv.integrations.nix-direnv.enable","content":"Whether to enable direnv integration with nix-direnv.","path":"options.html#option-rum-programs-direnv-integrations-nix-direnv-enable"},{"id":"31","title":"Option: rum.programs.direnv.integrations.nix-direnv.package","content":"The nix-direnv package to use.","path":"options.html#option-rum-programs-direnv-integrations-nix-direnv-package"},{"id":"32","title":"Option: rum.programs.direnv.integrations.zsh.enable","content":"Whether to enable direnv integration with zsh.","path":"options.html#option-rum-programs-direnv-integrations-zsh-enable"},{"id":"33","title":"Option: rum.programs.direnv.package","content":"The direnv package to use.","path":"options.html#option-rum-programs-direnv-package"},{"id":"34","title":"Option: rum.programs.direnv.settings","content":"Configuration written to {file}`$HOME/.config/direnv/direnv.toml`.\nPlease reference [direnv's documentation] for config options.\n\n[direnv's documentation]: https://direnv.net/man/direnv.toml.1.html\n","path":"options.html#option-rum-programs-direnv-settings"},{"id":"35","title":"Option: rum.programs.fish.abbrs","content":"A set of fish abbreviations, they will be set up with the `abbr --add` fish builtin.\n","path":"options.html#option-rum-programs-fish-abbrs"},{"id":"36","title":"Option: rum.programs.fish.aliases","content":"A set of fish aliases, they will be set up with the `alias` fish builtin.\n","path":"options.html#option-rum-programs-fish-aliases"},{"id":"37","title":"Option: rum.programs.fish.config","content":"The main configuration for fish, written verbatim to `.config/fish/config.fish`.\n","path":"options.html#option-rum-programs-fish-config"},{"id":"38","title":"Option: rum.programs.fish.earlyConfigFiles","content":"Extra configuration files, they will all be written verbatim\nto `.config/fish/conf.d/<name>.fish`.\n\nThose files are run before `.config/fish/config.fish` as per the [fish documentation].\n\n[fish documentation]: https://fishshell.com/docs/current/language.html#configuration-files\n","path":"options.html#option-rum-programs-fish-earlyConfigFiles"},{"id":"39","title":"Option: rum.programs.fish.enable","content":"Whether to enable fish.","path":"options.html#option-rum-programs-fish-enable"},{"id":"40","title":"Option: rum.programs.fish.functions","content":"A fish function which is being written to `.config/fish/functions/<name>.fish`.\n\nIf the input value is a string, its contents will be wrapped\ninside of a function declaration, like so:\n```fish\nfunction <name>;\n    <function body>\nend\n```\nOtherwise you are expected to handle that yourself.\n","path":"options.html#option-rum-programs-fish-functions"},{"id":"41","title":"Option: rum.programs.fish.package","content":"The fish package to use.","path":"options.html#option-rum-programs-fish-package"},{"id":"42","title":"Option: rum.programs.fish.plugins","content":"An attrset of plugins.\n\nIn the case where a plugin is a 'vendored' plugin, all we are doing is adding that\nplugin to `hjem.users.<name>.packages`. As fish automatically discovers those files.\n\nA vendored plugin is denoted by the existence of one of the following files in its derivation:\n- /share/fish/vendor_conf.d\n- /share/fish/vendor_completions.d\n- /share/fish/vendor_functions.d\n\nThis will be the case with plugins present in {file}`pkgs.fishPlugins`.\n\nFor the remaining cases, a file will be created at `~/.config/fish/conf.d/rum-plugin-<name>.fish`.\nIt will attempt to handle or source a variety of expected files from the derivation. Those files are:\n\n- `/functions`: is added to `fish_function_path`\n- `/completions`: is added to `fish_complete_path`\n- `/conf.d/*`, `/key_bindings.fish`, `/init.fish`: sourced in this order\n\nIf a plugin seems to not work, verify that it contains one of the aformentioned files.\n","path":"options.html#option-rum-programs-fish-plugins"},{"id":"43","title":"Option: rum.programs.flameshot.enable","content":"Whether to enable flameshot.","path":"options.html#option-rum-programs-flameshot-enable"},{"id":"44","title":"Option: rum.programs.flameshot.package","content":"The flameshot package to use.","path":"options.html#option-rum-programs-flameshot-package"},{"id":"45","title":"Option: rum.programs.flameshot.settings","content":"Configuration written to {file}`$HOME/.config/flameshot/flameshot.ini`.\nPlease reference [flameshot's example config] for config options.\n\n[flameshot's example config]: https://github.com/flameshot-org/flameshot/blob/master/flameshot.example.ini\n","path":"options.html#option-rum-programs-flameshot-settings"},{"id":"46","title":"Option: rum.programs.foot.enable","content":"Whether to enable foot.","path":"options.html#option-rum-programs-foot-enable"},{"id":"47","title":"Option: rum.programs.foot.package","content":"The foot package to use.","path":"options.html#option-rum-programs-foot-package"},{"id":"48","title":"Option: rum.programs.foot.settings","content":"Settings are written as an INI file to {file}`$HOME/.config/foot/foot.ini`.\n\nRefer to {manpage}`foot.ini(5)` or the [upstream template]\nfor all available options.\n\n[upstream template]: https://github.com/aome510/spotify-player/blob/master/docs/config.md#themes\n","path":"options.html#option-rum-programs-foot-settings"},{"id":"49","title":"Option: rum.programs.fuzzel.enable","content":"Whether to enable fuzzel.","path":"options.html#option-rum-programs-fuzzel-enable"},{"id":"50","title":"Option: rum.programs.fuzzel.package","content":"The fuzzel package to use.","path":"options.html#option-rum-programs-fuzzel-package"},{"id":"51","title":"Option: rum.programs.fuzzel.settings","content":"Is written to {file}`$HOME/fuzzel/fuzzel.ini`.\n\nPlease reference {manpage}`fuzzel.ini(5)` for configuration options.\n","path":"options.html#option-rum-programs-fuzzel-settings"},{"id":"52","title":"Option: rum.programs.fzf.enable","content":"Whether to enable fzf.","path":"options.html#option-rum-programs-fzf-enable"},{"id":"53","title":"Option: rum.programs.fzf.integrations.fish.enable","content":"Whether to enable fzf integration with fish.","path":"options.html#option-rum-programs-fzf-integrations-fish-enable"},{"id":"54","title":"Option: rum.programs.fzf.integrations.zsh.enable","content":"Whether to enable fzf integration with zsh.","path":"options.html#option-rum-programs-fzf-integrations-zsh-enable"},{"id":"55","title":"Option: rum.programs.fzf.package","content":"The fzf package to use.","path":"options.html#option-rum-programs-fzf-package"},{"id":"56","title":"Option: rum.programs.gammastep.enable","content":"Whether to enable gammastep.","path":"options.html#option-rum-programs-gammastep-enable"},{"id":"57","title":"Option: rum.programs.gammastep.package","content":"The gammastep package to use.","path":"options.html#option-rum-programs-gammastep-package"},{"id":"58","title":"Option: rum.programs.gammastep.settings","content":"Settings are written as an INI file to {file}`$HOME/.config/gammastep/config.ini`.\nRefer to [gammastep's example configuration] all available options.\n\n[gammastep's example configuration]: https://gitlab.com/chinstrap/gammastep/-/blob/master/gammastep.conf.sample\n","path":"options.html#option-rum-programs-gammastep-settings"},{"id":"59","title":"Option: rum.programs.ghostty.enable","content":"Whether to enable Ghostty.","path":"options.html#option-rum-programs-ghostty-enable"},{"id":"60","title":"Option: rum.programs.ghostty.package","content":"The ghostty package to use. You can use an override to configure some settings baked into the package.\n","path":"options.html#option-rum-programs-ghostty-package"},{"id":"61","title":"Option: rum.programs.ghostty.settings","content":"The configuration converted to INI and written to {file}`$HOME/.config/ghostty/config`.\nPlease consult [Ghostty's option reference]\nfor configuration options.\n\n[Ghostty's option reference]: https://ghostty.org/docs/config/reference\n","path":"options.html#option-rum-programs-ghostty-settings"},{"id":"62","title":"Option: rum.programs.ghostty.themes","content":"An attribute set of themes, with the key as the theme name.\nPlease reference [Ghostty's color theme documentation]\nfor configuration options.\n\n[Ghostty's color theme documentation]: https://ghostty.org/docs/features/theme\n","path":"options.html#option-rum-programs-ghostty-themes"},{"id":"63","title":"Option: rum.programs.git.attributes","content":"Global user-level version of .gitattributes written to\n{file}`$HOME/.config/git/attributes`.\n","path":"options.html#option-rum-programs-git-attributes"},{"id":"64","title":"Option: rum.programs.git.enable","content":"Whether to enable git.","path":"options.html#option-rum-programs-git-enable"},{"id":"65","title":"Option: rum.programs.git.ignore","content":"Global user-level version of .gitignore written to\n{file}`$HOME/.config/git/ignore`.\n","path":"options.html#option-rum-programs-git-ignore"},{"id":"66","title":"Option: rum.programs.git.integrations.difftastic.enable","content":"Whether to enable git integration with difftastic.","path":"options.html#option-rum-programs-git-integrations-difftastic-enable"},{"id":"67","title":"Option: rum.programs.git.integrations.difftastic.flags","content":"Command-line flags passed to `difft`. Please run `difft --help` for\nconfiguration options.\n","path":"options.html#option-rum-programs-git-integrations-difftastic-flags"},{"id":"68","title":"Option: rum.programs.git.integrations.difftastic.package","content":"The difftastic package to use.","path":"options.html#option-rum-programs-git-integrations-difftastic-package"},{"id":"69","title":"Option: rum.programs.git.package","content":"The git package to use.","path":"options.html#option-rum-programs-git-package"},{"id":"70","title":"Option: rum.programs.git.settings","content":"Settings that will be written to your configuration file.\n","path":"options.html#option-rum-programs-git-settings"},{"id":"71","title":"Option: rum.programs.helix.enable","content":"Whether to enable Helix.","path":"options.html#option-rum-programs-helix-enable"},{"id":"72","title":"Option: rum.programs.helix.languages","content":"The languages configurations converted into TOML and written to\n{file}`$HOME/.config/helix/languages.toml`. Please reference\n[Helix's language documentation] for config options.\n\n[Helix's language documentation]: https://docs.helix-editor.com/languages.html\n","path":"options.html#option-rum-programs-helix-languages"},{"id":"73","title":"Option: rum.programs.helix.package","content":"The helix package to use.","path":"options.html#option-rum-programs-helix-package"},{"id":"74","title":"Option: rum.programs.helix.settings","content":"The editor configuration converted into TOML and written to\n{file}`$HOME/.config/helix/config.toml`. Please reference\n[Helix's documentation] for config options.\n\n[Helix's documentation]: https://docs.helix-editor.com/editor.html\n","path":"options.html#option-rum-programs-helix-settings"},{"id":"75","title":"Option: rum.programs.helix.themes","content":"The custom themes converted into TOML and written to\n{file}`$HOME/.config/helix/themes/`. Please reference\n[Helix's theming documentation] for config options.\n\n[Helix's theming documentation]: https://docs.helix-editor.com/themes.html\n","path":"options.html#option-rum-programs-helix-themes"},{"id":"76","title":"Option: rum.programs.hypridle.enable","content":"Whether to enable hypridle.","path":"options.html#option-rum-programs-hypridle-enable"},{"id":"77","title":"Option: rum.programs.hypridle.package","content":"The hypridle package to use.","path":"options.html#option-rum-programs-hypridle-package"},{"id":"78","title":"Option: rum.programs.hypridle.settings","content":"Is written to {file}`$HOME/hypr/hypridle.conf`.\n\nConfiguration options can be found on the [Hyprland Wiki].\n\n[Hyprland Wiki]: https://wiki.hyprland.org/Hypr-Ecosystem/hypridle\n","path":"options.html#option-rum-programs-hypridle-settings"},{"id":"79","title":"Option: rum.programs.hyprlock.enable","content":"Whether to enable hyprlock.","path":"options.html#option-rum-programs-hyprlock-enable"},{"id":"80","title":"Option: rum.programs.hyprlock.package","content":"The hyprlock package to use.","path":"options.html#option-rum-programs-hyprlock-package"},{"id":"81","title":"Option: rum.programs.hyprlock.settings","content":"Is written to {file}`$HOME/hypr/hyprlock.conf`.\n\nConfiguration options can be found on the [Hyprland Wiki].\n\n[Hyprland Wiki]: https://wiki.hyprland.org/Hypr-Ecosystem/hyprlock\n","path":"options.html#option-rum-programs-hyprlock-settings"},{"id":"82","title":"Option: rum.programs.keepassxc.enable","content":"Whether to enable KeePassXC.","path":"options.html#option-rum-programs-keepassxc-enable"},{"id":"83","title":"Option: rum.programs.keepassxc.package","content":"The keepassxc package to use.","path":"options.html#option-rum-programs-keepassxc-package"},{"id":"84","title":"Option: rum.programs.keepassxc.settings","content":"Settings are written as an INI file to {file}`$HOME/.config/keepassxc/keepassxc.ini`. Please reference\n[KeePassXC's User Guide].\n\nIt also can be configured by toggling options through the GUI, but this does not seem documented.\n\n[KeePassXC's User Guide]: https://keepassxc.org/docs/KeePassXC_UserGuide\n","path":"options.html#option-rum-programs-keepassxc-settings"},{"id":"85","title":"Option: rum.programs.kitty.enable","content":"Whether to enable kitty.","path":"options.html#option-rum-programs-kitty-enable"},{"id":"86","title":"Option: rum.programs.kitty.integrations.fish.enable","content":"Whether to enable kitty integration with fish.","path":"options.html#option-rum-programs-kitty-integrations-fish-enable"},{"id":"87","title":"Option: rum.programs.kitty.integrations.zsh.enable","content":"Whether to enable kitty integration with zsh.","path":"options.html#option-rum-programs-kitty-integrations-zsh-enable"},{"id":"88","title":"Option: rum.programs.kitty.package","content":"The kitty package to use.","path":"options.html#option-rum-programs-kitty-package"},{"id":"89","title":"Option: rum.programs.kitty.settings","content":"Configuration written to {file}`$HOME/.config/kitty/kitty.conf`.\nPlease reference [kitty's documentation] for config options.\n\n[kitty's documentation]: https://sw.kovidgoyal.net/kitty/conf/\n","path":"options.html#option-rum-programs-kitty-settings"},{"id":"90","title":"Option: rum.programs.kitty.theme.dark","content":"Dark theme to be linked to {file}`$HOME/.config/kitty/dark-theme.auto.conf`.\nThis theme is set when your OS theme is set to dark.\n\nPlease reference [kitty-themes' repository] for available themes.\n\n[kitty-themes' repository]: https://github.com/kovidgoyal/kitty-themes\n","path":"options.html#option-rum-programs-kitty-theme-dark"},{"id":"91","title":"Option: rum.programs.kitty.theme.light","content":"Light theme to be linked to {file}`$HOME/.config/kitty/light-theme.auto.conf`.\nThis theme is set when your OS theme is set to light.\n\nPlease reference [kitty-themes' repository] for available themes.\n\n[kitty-themes' repository]: https://github.com/kovidgoyal/kitty-themes\n","path":"options.html#option-rum-programs-kitty-theme-light"},{"id":"92","title":"Option: rum.programs.kitty.theme.no-preference","content":"no-preference theme to be linked to {file}`$HOME/.config/kitty/no-preference-theme.auto.conf`.\nThis theme is set when your OS does not specify any theme preference.\n\nPlease reference [kitty-themes' repository] for available themes.\n\n[kitty-themes' repository]: https://github.com/kovidgoyal/kitty-themes\n","path":"options.html#option-rum-programs-kitty-theme-no-preference"},{"id":"93","title":"Option: rum.programs.lsd.colors","content":"Configuration written to {file}`$HOME/.config/lsd/colors.yaml`, defining the colors used by lsd.\nPlease reference [lsd's color theme example] to configure it accordingly.\n\n[lsd's color theme example]: https://github.com/lsd-rs/lsd#color-theme-file-content\n","path":"options.html#option-rum-programs-lsd-colors"},{"id":"94","title":"Option: rum.programs.lsd.enable","content":"Whether to enable LSD (LSDeluxe).","path":"options.html#option-rum-programs-lsd-enable"},{"id":"95","title":"Option: rum.programs.lsd.icons","content":"Configuration written to {file}`$HOME/.config/lsd/icons.yaml`, defining the icons used by lsd.\nPlease reference [lsd's icon theme example] to configure it accordingly.\n\n[lsd's icon theme example]: https://github.com/lsd-rs/lsd#icon-theme\n","path":"options.html#option-rum-programs-lsd-icons"},{"id":"96","title":"Option: rum.programs.lsd.package","content":"The lsd package to use.","path":"options.html#option-rum-programs-lsd-package"},{"id":"97","title":"Option: rum.programs.lsd.settings","content":"Configuration written to {file}`$HOME/.config/lsd/config.yaml`, defining lsd settings.\nPlease reference  [lsd's example configuration] to configure it accordingly.\n\n[lsd's example configuration]: https://github.com/lsd-rs/lsd#config-file-content\n","path":"options.html#option-rum-programs-lsd-settings"},{"id":"98","title":"Option: rum.programs.ncmpcpp.bindings","content":"Custom bindings configuration written to {file}`$HOME/.config/ncmpcpp/bindings`.\nPlease reference {manpage}`ncmpcpp(1)` to configure it accordingly, or consult\n[ncmpcpp's example bindings file].\n\nThe lists are separated between keys, for actions ran on keypresses, and commands, for actions ran\non commands. The option's example demonstrates this greatly.\n\n[ncmpcpp's example bindings file]: https://github.com/ncmpcpp/ncmpcpp/blob/master/doc/bindings\n","path":"options.html#option-rum-programs-ncmpcpp-bindings"},{"id":"99","title":"Option: rum.programs.ncmpcpp.bindings.<name>.*.actions","content":"The actions to be ran on either the key's or command's activation.\n","path":"options.html#option-rum-programs-ncmpcpp-bindings-<name>-*-actions"},{"id":"100","title":"Option: rum.programs.ncmpcpp.bindings.<name>.*.binding","content":"The key or command for which the set of actions is binded to.\n","path":"options.html#option-rum-programs-ncmpcpp-bindings-<name>-*-binding"},{"id":"101","title":"Option: rum.programs.ncmpcpp.bindings.<name>.*.deferred","content":"Whether the binding or command should be deferred (true) or immediate (false).\n","path":"options.html#option-rum-programs-ncmpcpp-bindings-<name>-*-deferred"},{"id":"102","title":"Option: rum.programs.ncmpcpp.enable","content":"Whether to enable ncmpcpp, a mpd-based music player..","path":"options.html#option-rum-programs-ncmpcpp-enable"},{"id":"103","title":"Option: rum.programs.ncmpcpp.package","content":"The ncmpcpp package to use. You can override the package to customize certain settings that are baked into the package.\n","path":"options.html#option-rum-programs-ncmpcpp-package"},{"id":"104","title":"Option: rum.programs.ncmpcpp.settings","content":"Configuration written to {file}`$HOME/.config/ncmpcpp/config`.\nPlease reference {manpage}`ncmpcpp(1)` to configure it accordingly, or consult [ncmpcpp's example configuration].\n\n[ncmpcpp's example configuration]: https://github.com/ncmpcpp/ncmpcpp/blob/master/doc/config\n","path":"options.html#option-rum-programs-ncmpcpp-settings"},{"id":"105","title":"Option: rum.programs.nushell.aliases","content":"A set of aliases for nushell, converted into nu and written to\n{file}`$HOME/.config/nushell/config.nu`. Please note that we cannot\nhandle complex aliases that use `def` at this time.\n\nPlease see [The Nushell Book] for a simple tutorial.\n\n[The Nushell Book]: https://www.nushell.sh/book/aliases.html\n","path":"options.html#option-rum-programs-nushell-aliases"},{"id":"106","title":"Option: rum.programs.nushell.enable","content":"Whether to enable nushell.","path":"options.html#option-rum-programs-nushell-enable"},{"id":"107","title":"Option: rum.programs.nushell.envFile","content":"[The Nushell Book]: https://www.nushell.sh/book/configuration.html\n\nExtra configuration to be written to {file}`$HOME/.config/nushell/env.nu`.\nPlease keep in mind that the upstream documentation generally advises against\nwriting to this file, and instead suggests using {file}`$HOME/.config/nushell/config.nu`.\n\nSee [The Nushell Book] for more info.\n\n","path":"options.html#option-rum-programs-nushell-envFile"},{"id":"108","title":"Option: rum.programs.nushell.extraConfig","content":"Extra configuration to be written to {file}`$HOME/.config/nushell/config.nu`.\n\nPlease see [The Nushell Book] for more info.\n\n[The Nushell Book]: https://www.nushell.sh/book/configuration.html\n","path":"options.html#option-rum-programs-nushell-extraConfig"},{"id":"109","title":"Option: rum.programs.nushell.loginFile","content":"Nushell may be used as a login shell, so this option writes to\n{file}`$HOME/.config/nushell/login.nu` to allow you to configure\nnushell as your login shell.\n\nPlease recognize that this is mainly for advanced users and is not\nfor the faint of heart. Direct your questions and concerns to\n[The Nushell Book] for more information.\n\n[The Nushell Book]: https://www.nushell.sh/book/configuration.html#configuring-nu-as-a-login-shell\n","path":"options.html#option-rum-programs-nushell-loginFile"},{"id":"110","title":"Option: rum.programs.nushell.package","content":"The nushell package to use.","path":"options.html#option-rum-programs-nushell-package"},{"id":"111","title":"Option: rum.programs.nushell.plugins","content":"A list of plugin packages to be installed and added to the\nnushell plugin registry.\n","path":"options.html#option-rum-programs-nushell-plugins"},{"id":"112","title":"Option: rum.programs.nushell.settings","content":"A set of options for nushell, flattened, prepended with `$env.config` to avoid overwriting\n(tables of config are overwritten if they occupy the same namespace). It is then written\nto {file}`$HOME/.config/nushell/config.nu`.\n\nPlease see [The Nushell Book] for configuration options.\n\n[The Nushell Book]: https://www.nushell.sh/book/configuration.html\n","path":"options.html#option-rum-programs-nushell-settings"},{"id":"113","title":"Option: rum.programs.obs-studio.enable","content":"Whether to enable OBS Studio.","path":"options.html#option-rum-programs-obs-studio-enable"},{"id":"114","title":"Option: rum.programs.obs-studio.package","content":"The obs-studio package to use. You can override the package to install plugins.\n","path":"options.html#option-rum-programs-obs-studio-package"},{"id":"115","title":"Option: rum.programs.spotify-player.enable","content":"Whether to enable spotify_player.","path":"options.html#option-rum-programs-spotify-player-enable"},{"id":"116","title":"Option: rum.programs.spotify-player.keymap","content":"Sets of keymaps and actions converted into TOML and written to\n{file}`$HOME/.config/spotify-player/keymap.toml`.\nSee example for how to format declarations.\n\nPlease reference [spotify_player's keymaps documentation]\nfor more information.\n\n[spotify_player's keymaps documentation]: https://github.com/aome510/spotify-player/blob/master/docs/config.md#keymaps\n","path":"options.html#option-rum-programs-spotify-player-keymap"},{"id":"117","title":"Option: rum.programs.spotify-player.package","content":"The spotify-player package to use. You can use an override to configure certain settings\nbaked into the package.\n","path":"options.html#option-rum-programs-spotify-player-package"},{"id":"118","title":"Option: rum.programs.spotify-player.settings","content":"The configuration converted into TOML and written to\n{file}`$HOME/.config/spotify-player/app.toml`.\n\nPlease reference [spotify_player's configuration documentation]\nfor configuration options.\n\n[spotify_player's configuration documentation]: https://github.com/aome510/spotify-player/blob/master/docs/config.md#general\n","path":"options.html#option-rum-programs-spotify-player-settings"},{"id":"119","title":"Option: rum.programs.spotify-player.themes","content":"The theme converted into TOML and written to\n{file}`$HOME/.config/spotify-player/themes.toml`.\n\nPlease reference [spotify_player's theme documentation]\nfor configuration options.\n\n[spotify_player's theme documentation]: https://github.com/aome510/spotify-player/blob/master/docs/config.md#themes\n","path":"options.html#option-rum-programs-spotify-player-themes"},{"id":"120","title":"Option: rum.programs.starship.enable","content":"Whether to enable starship module..","path":"options.html#option-rum-programs-starship-enable"},{"id":"121","title":"Option: rum.programs.starship.integrations.fish.enable","content":"Whether to enable starship integration with fish.","path":"options.html#option-rum-programs-starship-integrations-fish-enable"},{"id":"122","title":"Option: rum.programs.starship.integrations.nushell.enable","content":"Whether to enable starship integration with nushell.","path":"options.html#option-rum-programs-starship-integrations-nushell-enable"},{"id":"123","title":"Option: rum.programs.starship.integrations.zsh.enable","content":"Whether to enable starship integration with zsh.","path":"options.html#option-rum-programs-starship-integrations-zsh-enable"},{"id":"124","title":"Option: rum.programs.starship.package","content":"The starship package to use.","path":"options.html#option-rum-programs-starship-package"},{"id":"125","title":"Option: rum.programs.starship.settings","content":"The configuration converted to TOML and written to {file}`$HOME/.config/starship.toml`.\nPlease reference [Starship's documentation] for configuration options.\n\n[Starship's documentation]: https://starship.rs/config\n","path":"options.html#option-rum-programs-starship-settings"},{"id":"126","title":"Option: rum.programs.starship.transience.enable","content":"Whether to enable enable transience.","path":"options.html#option-rum-programs-starship-transience-enable"},{"id":"127","title":"Option: rum.programs.tealdeer.enable","content":"Whether to enable tealdeer.","path":"options.html#option-rum-programs-tealdeer-enable"},{"id":"128","title":"Option: rum.programs.tealdeer.package","content":"The tealdeer package to use.","path":"options.html#option-rum-programs-tealdeer-package"},{"id":"129","title":"Option: rum.programs.tealdeer.settings","content":"Configuration written to {file}`$HOME/.config/tealdeer/config.toml`.\nPlease reference [tealdeer's documentation] for config options.\n\n[tealdeer's documentation]: https://tealdeer-rs.github.io/tealdeer/config.html\n","path":"options.html#option-rum-programs-tealdeer-settings"},{"id":"130","title":"Option: rum.programs.tofi.enable","content":"Whether to enable tofi.","path":"options.html#option-rum-programs-tofi-enable"},{"id":"131","title":"Option: rum.programs.tofi.package","content":"The tofi package to use.","path":"options.html#option-rum-programs-tofi-package"},{"id":"132","title":"Option: rum.programs.tofi.settings","content":"The configuration converted into \"key = value\" and written to\n{file}`$HOME/.config/tofi/config`. Please reference\n{manpage}`tofi(5)`, or see an example at\n[tofi's default configuration].\n\n[tofi's default configuration]: https://github.com/philj56/tofi/blob/master/doc/config\n","path":"options.html#option-rum-programs-tofi-settings"},{"id":"133","title":"Option: rum.programs.vscode.enable","content":"Whether to enable Visual Studio Code.","path":"options.html#option-rum-programs-vscode-enable"},{"id":"134","title":"Option: rum.programs.vscode.package","content":"The vscode package to use.","path":"options.html#option-rum-programs-vscode-package"},{"id":"135","title":"Option: rum.programs.vscode.settings","content":"The configuration converted into JSON and written to\n{file}`$HOME/.config/Code/User/settings.json`.\n\nPlease reference [Visual Studio Code's official documentation]\nfor more information.\n\n[Visual Studio Code's official documentation]: https://code.visualstudio.com/docs/getstarted/settings#_settings-json-file\n","path":"options.html#option-rum-programs-vscode-settings"},{"id":"136","title":"Option: rum.programs.zoxide.enable","content":"Whether to enable zoxide.","path":"options.html#option-rum-programs-zoxide-enable"},{"id":"137","title":"Option: rum.programs.zoxide.flags","content":"Command-line flags passed to `zoxide init`.\nPlease reference [zoxide's documentation] for configuration options.\n\n[zoxide's documentation]: https://github.com/ajeetdsouza/zoxide#flags\n","path":"options.html#option-rum-programs-zoxide-flags"},{"id":"138","title":"Option: rum.programs.zoxide.integrations.fish.enable","content":"Whether to enable zoxide integration with fish.","path":"options.html#option-rum-programs-zoxide-integrations-fish-enable"},{"id":"139","title":"Option: rum.programs.zoxide.integrations.zsh.enable","content":"Whether to enable zoxide integration with zsh.","path":"options.html#option-rum-programs-zoxide-integrations-zsh-enable"},{"id":"140","title":"Option: rum.programs.zoxide.package","content":"The zoxide package to use.","path":"options.html#option-rum-programs-zoxide-package"},{"id":"141","title":"Option: rum.programs.zsh.enable","content":"Whether to enable zsh.","path":"options.html#option-rum-programs-zsh-enable"},{"id":"142","title":"Option: rum.programs.zsh.initConfig","content":"Commands that will be added verbatim to {file}`.zshrc`.\n\nA good starting point for learning how to configure zsh is the [Arch Wiki entry].\n\n[Arch Wiki entry]: https://wiki.archlinux.org/title/Zsh\n","path":"options.html#option-rum-programs-zsh-initConfig"},{"id":"143","title":"Option: rum.programs.zsh.loginConfig","content":"Commands that will be added verbatim to {file}`.zlogin`.\n\nA good starting point for learning how to configure zsh is the [Arch Wiki entry].\n\n[Arch Wiki entry]: https://wiki.archlinux.org/title/Zsh\n","path":"options.html#option-rum-programs-zsh-loginConfig"},{"id":"144","title":"Option: rum.programs.zsh.logoutConfig","content":"Commands that will be added verbatim to {file}`.zlogout`.\n\nA good starting point for learning how to configure zsh is the [Arch Wiki entry].\n\n[Arch Wiki entry]: https://wiki.archlinux.org/title/Zsh\n","path":"options.html#option-rum-programs-zsh-logoutConfig"},{"id":"145","title":"Option: rum.programs.zsh.package","content":"The zsh package to use.","path":"options.html#option-rum-programs-zsh-package"},{"id":"146","title":"Option: rum.programs.zsh.plugins","content":"An attrset of plugins to load into zsh. Configuration of the former can be done and is advised to be\ndone at this level, for the sake of organization.\n","path":"options.html#option-rum-programs-zsh-plugins"},{"id":"147","title":"Option: rum.programs.zsh.plugins.<name>.completions","content":"A list of completions that will be loaded into `fpath`.\n","path":"options.html#option-rum-programs-zsh-plugins-<name>-completions"},{"id":"148","title":"Option: rum.programs.zsh.plugins.<name>.config","content":"Commands that will be added verbatim to {file}`.zshrc` right after the plugin import..\n\nA good starting point for learning how to configure zsh is the [Arch Wiki entry].\n\n[Arch Wiki entry]: https://wiki.archlinux.org/title/Zsh\n","path":"options.html#option-rum-programs-zsh-plugins-<name>-config"},{"id":"149","title":"Option: rum.programs.zsh.plugins.<name>.source","content":"Path to the plugin file to load.","path":"options.html#option-rum-programs-zsh-plugins-<name>-source"}]